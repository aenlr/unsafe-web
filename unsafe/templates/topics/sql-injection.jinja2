{% extends "topics/base.jinja2" %}
{%- set initial_iframe = '/notes?embedded' -%}

{% block topic %}
  <h2>Översikt</h2>

  SQL Injection utnyttjar brister i applikationer som tillåter att indata
  hanteras som del av en SQL-sats istället för som data för parametrar.

  <h2>Enkel SQL-injection</h2>

  <p>
    Det vanligaste sättet är att utnyttja bristande escaping, dvs. naiv kod som
    direkt använder indata i en SQL-sats, t.ex.
  </p>

  {% call inlinesample('sql') %} SELECT * FROM users WHERE username = '[ANVÄNDARE]' {% endcall %}

  <p>
    Ett sätt att bryta sig ur blocket <code>'[ANVÄNDARE]'</code> är att infoga en egen apostrof
    och matcha den omslutande apostroften, t.ex. <code>' or '1'='1</code> vilket ger följande
    SQL
  </p>

  {% call inlinesample('sql') -%} SELECT * FROM users WHERE username = '' or '1'='1' {%- endcall %}

  <p>
    Den SQL-satsen kommer att returnera alla rader i tabellen <code>users</code>.
  </p>

  <p>
    <a class="embed" href='{{ "notes" | route_url }}'>/notes</a> visar användarens anteckningar.
  </p>

  <p>
    Genom SQL Injection i en parameter kan vi visa andras anteckningar:
    <a class="embed" href='{{ "notes" | route_url(_query={"category": "' or '1'='1"}) }}'>/notes?category=' or '1'='1</a>
  </p>

  <h2>Läs ut data från andra tabeller</h2>

  <p>
    Ett enkelt sätt att lura en sårbar applikation till att returnera data
    från andra tabeller är att använda union. Klicka på exemplet nedan för
    att visa hur användaruppgifter i denna applikation kan läsas ut.
  </p>

  <div>
    <a class="embed" href='{{ "notes" | route_url(_query={"category": "' and 1=0 union all select 1, user_id, username, email, password, '' from user --"}) }}'>
    {% call sample() -%}
SELECT note_id, user_id, category, content,
       created_at, updated_at
  FROM note
 WHERE user_id = 4
   AND category = ''
    -- Här börjar vår kod
   and 1=0
union all
    select 1, user_id, username,
           email, password, ''
    from user --' ORDER BY updated_at DESC
  {%- endcall %}
    </a>
  </div>

  <p>
    Ovanstående exempel använder <code>and 1=0</code> för att exkludera alla rader från
    den avsedda SQL-satsen.
  </p>
  <p>
    Därefter används <code>union all</code> för att returnera rader
    från tabellen med användarupgifter.
  </p>
  <p>
    Slutligen avslutas med <code>--</code> för att exkludera eventuella
    andra delar av den avsedda SQL-satsen.
  </p>

  <h2>Andra tekniker</h2>
  <p>
    Det finns mer sofistikera sätt att utnyttja SQL Injection på ställen
    där det inte är självklart att det kan genomföras, t.ex. kan man genom
    SQL Injection i <code>ORDER BY</code> extrahera en bit information i taget.
  </p>

  <p>
    SQL Injection i <code>LIMIT</code>-satsen kan utnyttjas trivialt.
  </p>

  <h2>Verktyg</h2>
  <p>
    Att manuellt konstruera en payload för SQL Injection kan vara besvärligt
    eftersom man som angripare inte vet exakt hur SQL-satserna ser ut under utan.
  </p>

  <p>
    Det finns tekniker för att experimentera sig fram, identifiera antal
    kolumner som returneras av SQL-satsen, söka efter sårbara parametrar,
    identifiera typen av databas mm.
  </p>
  <p>
    Men angriparen måste inte jobbet för hand utan kan använda olika verktyg för att
    söka efter sårbarheter.
  </p>

  <ul>
    <li>
      <a href="http://sqlmap.org/">sqlmap®</a>
    </li>
    <li>
      <a href="https://github.com/Neohapsis/bbqsql">BBQSQL</a>
    </li>
    <li>
      <a href="https://github.com/ron190/jsql-injection">jSQL Injection</a>
    </li>
    <li>
      mfl...
    </li>
  </ul>

  <p>
    Exempel som använder sqlmap för att visa alla tabeller i denna applikations databas
  </p>
  {% call sample('Dumpa databas med sqlmap') -%}
$ sqlmap --dump --cookie=session=[COOKIE] \
    -u 'http://ip:6543/notes?category=mat'
  {%- endcall -%}
  <p>
    Logga in och kopiera cookien <code>session</code> till kommandot och server-adressen.
  </p>

  <h2>Slutsats</h2>
  <p>
    Använd <em>alltid</em> parametristerad SQL med placeholders.
  </p>
  <p>
    Sätt aldrig samman SQL-satser genom strängkonkatenering av data från en anropare, inte
    ens för kod som bara anropas internt. Nästa utvecklare kanske väljer att anropa
    din fina funktion i ett annat sammanhang och vips ligger databasen öppen för angripare.
  </p>

{% endblock topic %}
